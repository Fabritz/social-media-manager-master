/* tslint:disable */
/* eslint-disable */
/**
 * SNS-Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Login,
  PixivToken,
  RefreshToken,
  SNSPostResponse,
  UnprocessableEntity,
} from '../models';
import {
    LoginFromJSON,
    LoginToJSON,
    PixivTokenFromJSON,
    PixivTokenToJSON,
    RefreshTokenFromJSON,
    RefreshTokenToJSON,
    SNSPostResponseFromJSON,
    SNSPostResponseToJSON,
    UnprocessableEntityFromJSON,
    UnprocessableEntityToJSON,
} from '../models';

export interface BookmarksBookmarksGetRequest {
    userId: string;
}

export interface PixivAuthPostRequest {
    login: Login;
}

export interface PixivPostPostPostRequest {
    images: Array<Blob>;
    tags: string;
    title: string;
    text?: string;
}

export interface PixivRefreshRefreshPostRequest {
    refreshToken: RefreshToken;
}

/**
 * 
 */
export class PixivApi extends runtime.BaseAPI {

    /**
     */
    async bookmarksBookmarksGetRaw(requestParameters: BookmarksBookmarksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling bookmarksBookmarksGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/pixiv/bookmarks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async bookmarksBookmarksGet(requestParameters: BookmarksBookmarksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bookmarksBookmarksGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async pingPingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/pixiv/ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pingPingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pingPingGetRaw(initOverrides);
    }

    /**
     * This might take a while to finish. It uses selenium to login as the user and could be error prone.
     * Login to pixiv
     */
    async pixivAuthPostRaw(requestParameters: PixivAuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PixivToken>> {
        if (requestParameters.login === null || requestParameters.login === undefined) {
            throw new runtime.RequiredError('login','Required parameter requestParameters.login was null or undefined when calling pixivAuthPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pixiv/auth/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginToJSON(requestParameters.login),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PixivTokenFromJSON(jsonValue));
    }

    /**
     * This might take a while to finish. It uses selenium to login as the user and could be error prone.
     * Login to pixiv
     */
    async pixivAuthPost(requestParameters: PixivAuthPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PixivToken> {
        const response = await this.pixivAuthPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload pixiv illustration post
     */
    async pixivPostPostPostRaw(requestParameters: PixivPostPostPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SNSPostResponse>> {
        if (requestParameters.images === null || requestParameters.images === undefined) {
            throw new runtime.RequiredError('images','Required parameter requestParameters.images was null or undefined when calling pixivPostPostPost.');
        }

        if (requestParameters.tags === null || requestParameters.tags === undefined) {
            throw new runtime.RequiredError('tags','Required parameter requestParameters.tags was null or undefined when calling pixivPostPostPost.');
        }

        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling pixivPostPostPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("jwt", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.images) {
            requestParameters.images.forEach((element) => {
                formParams.append('images', element as any);
            })
        }

        if (requestParameters.tags !== undefined) {
            formParams.append('tags', requestParameters.tags as any);
        }

        if (requestParameters.text !== undefined) {
            formParams.append('text', requestParameters.text as any);
        }

        if (requestParameters.title !== undefined) {
            formParams.append('title', requestParameters.title as any);
        }

        const response = await this.request({
            path: `/api/pixiv/post`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SNSPostResponseFromJSON(jsonValue));
    }

    /**
     * Upload pixiv illustration post
     */
    async pixivPostPostPost(requestParameters: PixivPostPostPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SNSPostResponse> {
        const response = await this.pixivPostPostPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a new access token using the refresh token
     */
    async pixivRefreshRefreshPostRaw(requestParameters: PixivRefreshRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PixivToken>> {
        if (requestParameters.refreshToken === null || requestParameters.refreshToken === undefined) {
            throw new runtime.RequiredError('refreshToken','Required parameter requestParameters.refreshToken was null or undefined when calling pixivRefreshRefreshPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/pixiv/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshTokenToJSON(requestParameters.refreshToken),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PixivTokenFromJSON(jsonValue));
    }

    /**
     * Get a new access token using the refresh token
     */
    async pixivRefreshRefreshPost(requestParameters: PixivRefreshRefreshPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PixivToken> {
        const response = await this.pixivRefreshRefreshPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
